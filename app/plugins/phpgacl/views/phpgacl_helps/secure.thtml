<?php echo $this->renderElement('phpgacl_start'); ?>

<div class="phpgacl-help">
	<h3>Basic Concepts</h3>
	
	<p>
		phpGACL for CakePHP provides an integration between CakePHP and <a href="http://phpgacl.sourceforge.net">phpGACL</a>, a multi-purpose, 
		open-source Access Control framework. Therefore, much of the concepts involved in understanding the behaviour of this plugin and the
		PhpGacl component for CakePHP comes from phpGACL. However, we have tried to simplify this notions as much as possible, without loosing
		phpGACL known flexibility.
	</p>
	
	<p>
		As phpGACL states, on one side we have entities requesting access. These entities, also known as AROs (Access Request Objects) can be users,
		or third party applications. For further control one can group AROs within groups. This plugin calls AROs simply <strong>Users</strong>, without limiting
		what a user can be (real person or remote application.) The section <strong>Users and Groups</strong> in the control panel will let you:
	</p>
	
	<ul>
		<li>Import Users / Groups from an existing CakePHP model into phpGACL.</li>
		<li>Create, Edit, and Remove Groups.</li>
		<li>Create, Edit, and Remove Users.</li>
		<li>Assign Users (when editing the User) to one or more groups.</li>
	</ul>
	
	<p>
		Just as there are entities requesting access, there are elements that behave as "things a user can access." phpGACL names them AXOs (Access
		Extended Objects), and we simply call them <strong>Controllable Elements</strong>. Since a controllable element can be anything from a standard CakePHP action
		inside its respective controller, to a Model or a Repository of files, phpGACL for CakePHP makes a distinction between two types of Controllable
		Elements:
	</p>
	
	<ul>
		<li><em>Controller / Actions</em>: CakePHP controllers and actions that can be accessed.</li>
		<li><em>Controllable Elements</em>: anything else that you decide can be requested access and should be protected.</li>
	</ul>
	
	<p>
		Inside the section <strong>Protectable Elements</strong>, you can specify which CakePHP controller/actions are available to be protected, and
		define your own protectable elements. To further organize your elements, you can set up Categories (also known as AXO groups), that can
		group your protectable elements.
	</p>
	
	<p>
		After defining things that request access (Users) and things that can be accessed (Controllable Elements), you can define what type of access
		the User can request for each Controllable Element. You do so by accessing the option <strong>Access Types</strong> inside the section
		<strong>Protectable Elements</strong>.
	</p>
	
	<p>
		Once you defined this information, you are ready to assign permissions to your User Groups. Inside the section <strong>Access Control</strong>
		you can find an option to set up <strong>Permissions for Groups</strong>, and an option to <strong>Check Permissions</strong>, that provides
		a clear screen where you can see what can each group access based on their permissions.
	</p>
	
	<a name="protect"></a>
	<h3>Protecting your CakePHP application</h3>
	
	<p>
		When you have defined all the necessary elements (Groups, Users, and Permissions) your controllers can be protected from unauthorized access
		by using the phpGACL Component for CakePHP (that means adding the component <code>PhpGacl</code> to your <code>$components</code> array in your controllers.) This component is embedded with this plugin and should be located on the directory
		<code><?php echo APP . 'controllers' . DS . 'components'; ?></code>
	</p>
	
	<p>
		Controllers that want to be checked for access include a class member variable called <code>$gacl</code>, that defines information such as:
	</p>
	
	<ul>
		<li>What actions should be checked for access</li>
		<li>Where is the User ID obtained from</li>
		<li>What to do when access for user is denied</li>
	</ul>
	
	<p>
		It is important to understand that eventhough you may've already imported your CakePHP controllers / actions into phpGACL, they are still not
		protected until you manually set the variable named <code>$gacl</code> on the controller class to activate the protection. You can do so on each controller you want protected (so those controllers that don't have the variable <code>$gacl</code> will not be checked for access), or on all controllers by defining the variable <code>$gacl</code> in your application wide base controller <code>AppController</code> class.
	</p>
	
	<p>
		Let's see a full list of all options that can be assigned inside variable <code>$gacl</code>.
	</p>
	
	<?php echo $this->renderElement('phpgacl_code', array ('code'=> '<' . "?php
var \$gacl = array(
	'check' => array ( ), /* Controller / Actions to check on */
	'get' => array (
		'type' => '', /* method to use to obtain user identifier */
		'value' => '' /* value used by the method defined above */
	),
	'denied' => array (
		'type' => '', /* method to use to take action when access is denied */
		'value' => '' /* value used by the method defined above */
	)
);
?" . '>')); ?>

	<p>
		You can only set those settings that apply to you. For example, if you ommit the setting <code>check</code>, then the current controller/action will
		be checked for access.
	</p>

	<ul>
		<li>
			<strong>check</strong>: a set of controller/actions where access should be checked. This is particularly useful when the <code>$gacl</code> variable is set on <code>AppController</code>, but not all the controller/actions should be checked for access. The list of controller actions can be a set of elements where
			<ul>
				<li>Each element is a string, which represents a controller name (on which case all actions within that controller will be checked for access.)</li>
				<li>Each element is of the form <code>'controller' =&gt; 'action'</code> where only the action <code>action</code> inside controller <code>controller</code> will be checked for access.</li>
				<li>Each element is of the form <code>'controller' =&gt; array ( 'action_1', 'action_2', ... )</code>, which means that the set of actions specified for controller <code>controller</code> will be checked for access.</li>
			</ul>
		</li>
		<li>
			<strong>get</strong>: defines how the user identifier is obtained. You define a method in <code>type</code>, and a value used by the method in <code>value</code>. The setting <code>type</code> can be either <code>callback</code> or <code>session</code>. If it is set to <code>callback</code>, the specified value in <code>value</code> is the name of the function inside your controller that will be called, and should return the user identifier (either a string, or an array with an index <code>id</code>.) If on the other hand it is set to <code>session</code>, then <code>value</code> will hold the session key on which the user identifier (either a string, or an array with an index <code>id</code>) can be found.
		</li>
		<li>
			<strong>denied</strong>: defines what to do when access is denied for current user. You define a method in <code>type</code>, and a value used by the method in <code>value</code>. The setting <code>type</code> can be either <code>callback</code> or <code>redirect</code>. If it is set to <code>callback</code>, the specified value in <code>value</code> is the name of the function inside your controller that will be called when access denied. If on the other hand it is set to <code>redirect</code>, then <code>value</code> will hold the URL that the user will be redirected to when access is denied.
		</li>
	</ul>
	
	<p>
		Let's see some examples to understand this further.
	</p>
	
	<h4>Example 1: default settings</h4>
	
	<?php echo $this->renderElement('phpgacl_code', array ('code'=> '<' . "?php
class PostsController extends AppController {
	var \$gacl = true;
	
	var \$components = array('PhpGacl');
}
?" . '>')); ?>

	<p>
		The above example will perform the checking with the following settings:
	</p>
	
	<ul>
		<li>All actions in current controller will be checked for access.</li>
		<li>User identifier is obtained from Session on key <code>User</code>. This key may hold either a string, or an array with an index named <code>id</code>.</li>
		<li>If access is denied, user is redirected to the application's home URL.</li>
	</ul>

	<h4>Example 2: setting page for denied access</h4>
	
	<?php echo $this->renderElement('phpgacl_code', array ('code'=> '<' . "?php
class PostsController extends AppController {
	var \$gacl = array(
		'denied' => array (
			'type' => 'redirect'
			'value' => '/pages/denied'
		)
	);
	
	var \$components = array('PhpGacl');
}
?" . '>')); ?>

	<p>
		The above example will perform the checking with the following settings:
	</p>
	
	<ul>
		<li>All actions in current controller will be checked for access.</li>
		<li>User identifier is obtained from Session on key <code>User</code>. This key may hold either a string, or an array with an index named <code>id</code>.</li>
		<li>If access is denied, user is redirected to /pages/denied.</li>
	</ul>

	<h4>Example 3: setting a callback to obtain user</h4>
	
	<?php echo $this->renderElement('phpgacl_code', array ('code'=> '<' . "?php
class PostsController extends AppController {
	var \$gacl = array(
		'get' => array (
			'type' => 'callback',
			'value' => '_getUser'
		)
	);
	
	var \$components = array('PhpGacl', 'Session');
	
	function _getUser()
	{
		if (\$this->Session->check('User'))
		{
			return \$this->Session->read('User');
		}
		
		return false;
	}
}
?" . '>')); ?>

	<p>
		The above example will perform the checking with the following settings:
	</p>
	
	<ul>
		<li>All actions in current controller will be checked for access.</li>
		<li>User identifier is obtained by calling the method <code>_getUser()</code>, which should return either a string, or an array with an index named <code>id</code>.</li>
		<li>If access is denied, user is redirected to the application's home URL.</li>
	</ul>

	<h4>Example 4: setting which controllers to protect in AppController</h4>
	
	<?php echo $this->renderElement('phpgacl_code', array ('code'=> '<' . "?php
class AppController extends Controller {
	var \$gacl = array(
		'check' => array ( 
			'Posts',
			'Users' => array ('edit', 'delete')
		)
	);
	
	var \$components = array('PhpGacl', 'Session');
}
?" . '>')); ?>
	
	<p>
		The above example will perform the checking with the following settings:
	</p>
	
	<ul>
		<li>Eventhough the <code>$gacl</code> variable is defined for all controllers (since it is defined on <code>AppController</code>), by using <code>check</code> we are specifying that we only want to check access on all actions in controller <code>Posts</code>, and actions <code>edit</code> and <code>delete</code> in controller <code>Users</code>.</li>
		<li>User identifier is obtained from Session on key <code>User</code>. This key may hold either a string, or an array with an index named <code>id</code>.</li>
		<li>If access is denied, user is redirected to the application's home URL.</li>
	</ul>
	
	<h3>Manually checking for Access</h3>
	
	<p>
		There may be certain ocassions on which you decide to manually check for access to certain elements. You can also override PhpGacl component's access
		by not setting the variable <code>$gacl</code> and instead perform a manual checking.
	</p>
	
	<p>
		To do a check on access we have two convenient methods on the PhpGacl Component:
	</p>
	
	<ul>
		<li><code>access($user, $controller, $action = null)</code>: Checks if the user with identifier set in <code>$user</code> has access to action <code>$action</code> in controller <code>$controller</code>. If <code>$action</code> is not set it will check to see if the user has access to at least one action in <code>$controller</code>. Returns <code>true</code> if user has access, <code>false</code> otherwise.</li>
		<li><code>checkAcl($aroSection, $aroValue, $acoSection, $acoValue, $axoSection, $axoValue)</code>: Check if the user with identifier <code>$aroValue</code>, loaded in the ARO section <code>$aroSection</code>, has an access of type <code>$acoValue</code> inside access type section <code>$acoSection</code> to a controllable element in category <code>$axoSection</code>, that has as its identifier <code>$axoValue</code>. Always set <code>$aroSection</code> to <code>'user'</code> (unless you know what you are doing.)
		<br /><br />
		In the case of controllers, the following values should be provided: <code>$acoSection</code> set to <code>'access'</code>, <code>$acoValue</code> set to <code>'execute'</code>, <code>$axoSection</code> set to the internal identifier for the controller (if controller is Posts, this value can be obtained by doing: <code>$this->PhpGacl->sectionControllerPrefix . Inflector::underscore('Posts')</code>) and <code>$axoValue</code> set to the name of the action.</li>
	</ul>
	
	<p>
		In the following example, our <code>PostsController</code> no longer defines the variable <code>$gacl</code>, but instead checks access to any action inside by overriding the method <code>beforeFilter</code> and doing an <code>access()</code> check there.
	</p>
	
	<?php echo $this->renderElement('phpgacl_code', array ('code'=> '<' . "?php
class PostsController extends AppController {
	var \$components = array('PhpGacl', 'Session');
	
	function beforeFilter()
	{
		if (\$this->Session->check('User'))
		{
			if (!\$this->PhpGacl->access(\$this->Session->read('User'), \$this->name, \$this->action))
			{
				\$this->redirect('/pages/denied');
				exit;
			}
		}
		
		return parent::beforeFilter();
	}
}
?" . '>')); ?>

	<p>
		Let's now say that you want to create a whole different set of Access Types and Controllable Elements. By following the notions described at the beggining of this document, you create:
	</p>
	
	<ul>
		<li>An Access Type called <code>Download</code> (with identifier <code>download</code>), and inside it an Access Type Object called <code>Download File</code> (with identifier <code>file</code>.) You did that by accessing the option <strong>Access Types</strong> inside section <strong>Protectable Elements</strong>.</li>
		<li>A Category called <code>Files</code> with identifier <code>files</code>. You did that by accessing the option <strong>Categories</strong> inside section <strong>Protectable Elements</strong>.</li>
		<li>A Controllable Element Section called <code>File Repositories</code> with identifier <code>file.repositories</code>, and inside it a Controllable Element called <code>Public Repository</code> (with identifier <code>file.public</code>) assigned to the category <code>Files</code>. You did that by accessing the option <strong>Controllable Elements</strong> inside section <strong>Protectable Elements</strong>.</li>
	</ul>
	
	<p>
		Now somewhere in the controller you want to check if the user with ID <code>211</code> can have access to the <code>Public Repository</code>. Let's see what the call to <code>checkAcl()</code> should be on that case:
	</p>
	
	<?php echo $this->renderElement('phpgacl_code', array ('code'=> '<' . "?php
if (\$this->PhpGacl->checkAcl('user', 211, 'download', 'file', 'file.repositories', 'file.public'))
{
	// Has access
}
else
{
	// Doesn't have access
}

?" . '>')); ?>
</div>

<?php echo $this->renderElement('phpgacl_end'); ?>